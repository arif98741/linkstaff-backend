<?php

namespace App\Exceptions;

use Illuminate\Auth\AuthenticationException;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Throwable;

class Handler extends ExceptionHandler
{
    /**
     * A list of the exception types that are not reported.
     *
     * @var string[]
     */
    protected $dontReport = [
        //
    ];

    /**
     * A list of the inputs that are never flashed for validation exceptions.
     *
     * @var string[]
     */
    protected $dontFlash = [
        'current_password',
        'password',
        'password_confirmation',
    ];

    /**
     * Register the exception handling callbacks for the application.
     *
     * @return void
     */
    public function register()
    {
        $this->reportable(function (Throwable $e) {
            //
        });

        $this->renderable(function (NotFoundHttpException $e, $request) {
            if ($request->is('api/*')) {

                return response()->json([
                    'message' => 'Api endpoint does not exist',
                    'code' => 404
                ], 404);
            }
        });
    }

    /**
     * @param $request
     * @param AuthenticationException $exception
     * @return \Symfony\Component\HttpFoundation\Response
     */
    protected function unauthenticated($request, AuthenticationException $exception)
    {
        $apiQueryString = $request->getRequestUri();
        $apiExplode = explode('/', $apiQueryString);
        \array_splice($apiExplode, 0, 1);
        if (is_array($apiExplode) && $apiExplode[0] == 'api') {
            return response()->json([
                'success' => false,
                'code' => 403,
                'message' => 'not authorized',
            ], 403);
        }

        return parent::unauthenticated($request, $exception); // TODO: Change the autogenerated stub
    }

}
